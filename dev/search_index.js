var documenterSearchIndex = {"docs":
[{"location":"functions.html#Legendre","page":"Functions","title":"Legendre","text":"","category":"section"},{"location":"functions.html","page":"Functions","title":"Functions","text":"FiniteHilbertTransform.LegendreFHT\nFiniteHilbertTransform.GettabD!(omg::ComplexF64,fht::FiniteHilbertTransform.LegendreFHT)\nFiniteHilbertTransform.tabQLeg!","category":"page"},{"location":"functions.html#FiniteHilbertTransform.LegendreFHT","page":"Functions","title":"FiniteHilbertTransform.LegendreFHT","text":"LegendreFHT\n\nType representing Legendre Finite Hilbert Transform (FHT) parameters.\n\nThis struct stores the necessary parameters for performing a Finite Hilbert Transform using Legendre functions. It implements the AbstractFHT interface and provides the required data structures and computations for Legendre FHT.\n\nFields:\n\nname::String: FHT name (default: \"Legendre\").\nKu::Int64: Number of sample points.\ntabu::Array{Float64,1}: Array containing u values (sampling points).\ntabw::Array{Float64,1}: Array containing w values (weights at sampling points).\ntabP::Matrix{Float64}: Matrix containing P_k(u) values (Ku x Ku).\ntabc::Vector{Float64}: Vector containing prefactor values at each sampling point.\ntabPLeg::Array{ComplexF64,1}: Static container for tabPLeg (Legendre functions of the first kind).\ntabQLeg::Array{ComplexF64,1}: Static container for tabQLeg (Hilbert-transformed Legendre functions).\ntabDLeg::Array{ComplexF64,1}: Static container for tabDLeg (Derivatives of Legendre functions).\n\nExample:\n\nKu = 100\ntabu = collect(-1.0:2/(Ku-1):1.0)\ntabw = compute_weights(tabu) # Compute weights for Legendre functions\ntabP = compute_legendre_matrix(tabu) # Compute Legendre functions matrix\ntabc = compute_prefactors(tabu) # Compute Legendre prefactors\n\nFHT = LegendreFHT(\"Legendre\", Ku, tabu, tabw, tabP, tabc, zeros(ComplexF64, Ku), zeros(ComplexF64, Ku), zeros(ComplexF64, Ku))\n\n\n\n\n\n","category":"type"},{"location":"functions.html#FiniteHilbertTransform.GettabD!-Tuple{ComplexF64, FiniteHilbertTransform.LegendreFHT}","page":"Functions","title":"FiniteHilbertTransform.GettabD!","text":"fill struct_tabLeg at a given complex frequency for the integration being considered\n\nintegration style selection is automatic: if you want to specify a type, call out to the specific integration method.\n\n\n\n\n\n","category":"method"},{"location":"functions.html#FiniteHilbertTransform.tabQLeg!","page":"Functions","title":"FiniteHilbertTransform.tabQLeg!","text":"tabQLeg!(omg::ComplexF64, val_0::ComplexF64, val_1::ComplexF64, tabQLeg::Array{ComplexF64,1})\n\nPrecompute Hilbert-transformed Legendre functions for a given complex frequency.\n\nArguments:\n\nomg::ComplexF64: Complex frequency. (ATTENTION: Must be complex.)\nval_0::ComplexF64: Initial value for k = 0. (ATTENTION: Must be complex.)\nval_1::ComplexF64: Initial value for k = 1. (ATTENTION: Must be complex.)\ntabQLeg::Array{ComplexF64,1}: Container to store the precomputed Hilbert-transformed Legendre functions.\n\nDetails:\n\nThis function uses different recurrence relations based on the location of the complex frequency omg. If omg is sufficiently close to the real line [-1,1], it employs an upward recurrence. Otherwise, if omg is far away from the real line [-1,1], it uses a backward recurrence. The transition between these regimes is determined dynamically.\n\nThe transition from the two regimes follows from the thesis Stable Implementation of Three-Term Recurrence Relations, Pascal Frederik Heiter, June, 2010 https://www.uni-ulm.de/fileadmin/websiteuniulm/mawi.inst.070/funken/bachelorarbeiten/bachelorthesis_pfh.pdf\n\nExample:\n\nomg = 1.0 + 2.0im\nval_0 = 1.0 + 1.0im\nval_1 = 2.0 + 2.0im\nKu = 10\ntabQLeg = zeros(ComplexF64, Ku)\ntabQLeg!(omg, val_0, val_1, tabQLeg)\n\n\n\n\n\n","category":"function"},{"location":"functions.html#Chebyshev","page":"Functions","title":"Chebyshev","text":"","category":"section"},{"location":"functions.html","page":"Functions","title":"Functions","text":"FiniteHilbertTransform.ChebyshevFHT\nFiniteHilbertTransform.GettabD!(omg::ComplexF64,fht::FiniteHilbertTransform.ChebyshevFHT)","category":"page"},{"location":"functions.html#FiniteHilbertTransform.ChebyshevFHT","page":"Functions","title":"FiniteHilbertTransform.ChebyshevFHT","text":"ChebyshevFHT\n\n\n\n\n\n","category":"type"},{"location":"functions.html#FiniteHilbertTransform.GettabD!-Tuple{ComplexF64, FiniteHilbertTransform.ChebyshevFHT}","page":"Functions","title":"FiniteHilbertTransform.GettabD!","text":"fill fht at a given complex frequency for the integration being considered\n\nintegration style selection is automatic: if you want to specify a type, call out to the specific integration method.\n\n\n\n\n\n","category":"method"},{"location":"index.html#FiniteHilbertTransform.jl","page":"Home","title":"FiniteHilbertTransform.jl","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Computation of Hilbert Transform with finite boundaries and Landau's prescription.","category":"page"}]
}
